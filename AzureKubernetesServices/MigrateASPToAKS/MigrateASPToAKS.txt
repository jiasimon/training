Containerize and migrate ASP.NET applications to Azure Kubernetes Service
https://learn.microsoft.com/en-us/training/modules/migrate-aspnet-app-azure-kubernetes-service/

• Discover and containerize your ASP.NET app running on Windows machines using Azure Migrate: App Containerization.
• Build a container image for your ASP.NET application.
• Deploy your containerized application to AKS using Azure Migrate: App Containerization


Azure Migrate: App Containerization is a standalone utility that you can download and install on any Windows 10 or Windows Server 2016 (or later) 

• ASP.NET applications using Microsoft .NET framework 3.5 or later
• Application servers running Windows Server 2008 R2 or later (application servers should be running PowerShell version 5.1)
• Applications running on Internet Information Services (IIS) 7.5 or later


1. Azure Migrate: App Containerization is a standalone utility that can run on any Windows 10 or Windows Server 2016 machine
A:

2. Which of the following application types are supported by Azure Migrate: App Containerization?
A: 


Exercise - Set up host environment

Once your subscription is set up, you'll need an Azure user account with:
  • Owner permissions on the Azure subscription
  • Permissions to register Microsoft Entra apps


In the Azure portal, search for "subscriptions", and under Services, select Subscriptions.
• On the Subscriptions page, select the subscription in which you want to create an Azure Migrate project.
• In the subscription, select Access control (IAM) > Check access.
• In Check access, search for the relevant user account.
• In Add a role assignment, click Add.
• In Add role assignment, select the Owner role, and select the account (azmigrateuser in our example). Then click Save.
• Your Azure account also needs permissions to register Microsoft Entra apps.
• In Azure portal, navigate to Microsoft Entra ID > Users > User Settings.
• In User settings, verify that Microsoft Entra users can register applications (set to Yes by default).
• In case the App registrations settings is set to No, request the tenant/global admin to assign the required permission. Alternately, the tenant/global admin can assign the Application Developer role to an account to allow the registration of Microsoft Entra App.


• To deploy the workshop environment, begin by navigating to the Azure portal.
• In your Azure subscription, create a new resource group called LearnAppContainerization.
• Click the button below to deploy the resources for the application. Clicking this button will take you to the Azure portal to deploy a custom template.
• Once the deployment is complete, you will see the following resources in your resource group.
ou'll need to create the SQL database that the migrated application will connect to. Follow the steps to create the SQL database.
  • Open PowerShell on your local machine and download the SQL database file using the following command:
invoke-webrequest -uri "https://appcontainerizationlearn.blob.core.windows.net/partsappdatabasemslearn/partsunlimiteddb.bacpac" -outfile./partsunlimited.bacpac
• Create a storage account called appcontainerizationsa.
• Add a container called partsunlimiteddbcontainer to the storage account. Select the Blob option for the public access level setting.
• In the container, select the Upload option and select the downloaded file.
• Go to the SQL Server resource created in the LearnAppContainerization resource group. The SQL Server will have a name similar to appcontainerization-lab0000.
• Select the import database option and enter the following values: 
  ○ Database name: partsunlimiteddb
  ○ Server admin login: adminuser
  ○ Password: Password@123
• To browse the application, select vm-aspserver virtual machine resource, copy the public IP address of the server, and paste it in a browser window.


Exercise - Discover your ASP.NET web application
• Select ASP.NET web apps as the type of application you want to containerize.
• To specify the target Azure service, select Containers on Azure Kubernetes Service.
• Accept the license terms and read the third-party information.
• The tool will automatically check for internet connectivity and install the latest version of the Azure Migrate: App Containerization tool.
• Select Verify validate the installation of Microsoft Web Deploy tool. The Microsoft Web Deploy has already been installed as part of the setup.
• The tool will inform you to enable PowerShell remoting which was done as part of the setup. Select Continue.


Select Sign in to log in to your Azure account.
  1. You'll need a device code to authenticate with Azure. Selecting Sign in will open a modal with the device code.
  2. Select Copy code & sign in to copy the device code and open an Azure sign-in prompt in a new browser tab. If it doesn't appear, make sure you've disabled the pop-up blocker in your browser.
  3. On the new tab, paste the device code and finish signing in using your Azure account credentials. You can close the browser tab after sign-in is complete to return to the App Containerization tool's web interface.
  4. Select the Azure tenant that you want to use.
  5. Specify the Azure subscription that you want to use.


Parameterize application configurations
• Select App configurations to review the detected configurations.
• Select the checkbox to parameterize the configuration with the attribute name DefaultConnectionString.
• Select Apply after selecting the configurations to parameterize.



Build container image
Create Azure Container Registry: Create a new Azure Container Registry to build and store the container images for the apps. Select the Create new registry option to create a new ACR called learnappcontainerizationacr.


Review the Dockerfile: The Dockerfile needed to build the container images for each selected application is generated at the beginning of the build step. Select Review to review the Dockerfile.


Trigger build process: Select the application for which to build images, then select Build. 

Track build status: 

Once the build is completed, select Continue to specify deployment settings.


Create the Azure Kubernetes Service Cluster
The tool provides an option to select an existing AKS cluster but for this exercise we will create a new AKS cluster.
  1. Select Create new AKS cluster.
  2. Select the Azure subscription with which you want to work.
  3. Select the LearnAppContainerization resource group.
  4. Specify the AKS cluster name as LearnAppContainerizationAKSCluster.
  5. Select any available location and SKU for the AKS cluster to be created.


Specify secret store
1. Select the option to Create new Azure Key Vault and specify the name as learnappcontainerizationkeyvault. The tool will automatically assign the necessary permissions for managing secrets through the Key Vault.
2. Create a new managed identity called learnappcontainerizationmanagedidentity. AKS will use this managed identity to access Key Vault to mount secrets for your application.




Clean up resources
In this module, you created resources by using your Azure subscription. The following steps show you how to clean up these resources so that there's no continued charge against your account.
  1. Go to the Azure portal.
  2. In the left menu, select Resource groups.
  3. Select the resource group name that starts with LearnAppContainerization (or the resource group name you used).
  4. On the Overview tab, select Delete resource group.
  5. To confirm the deletion, enter the name of the resource group. To delete all the resources you created in this module, select Delete.






