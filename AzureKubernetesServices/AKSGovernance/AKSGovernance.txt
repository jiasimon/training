Azure Kubernetes Services Governance with Azure Policy
https://learn.microsoft.com/en-us/training/modules/aks-governance-azure-policy/

• Deploy the Azure Policy and Azure Monitor add-on for Azure Kubernetes Service
• Use Azure Policy to enforce rules and manage compliance state of your Azure Kubernetes Service cluster
• Monitor cluster compliance status using Azure Policy
• Run queries to see runtime operation of policies in AKS clusters


work for a browser based video game company. After a few months of planning, your team successfully migrated its technology stack to Azure Kubernetes Service (AKS).

Azure Policy allows you to manage the compliance state of your Azure services. 

Azure Policy works by assigning a policy definition or an initiative to a specific scope.

Policies that enforce compliance on the Azure control plane for AKS.
Policies that enforce compliance on the workload running in your cluster.

use of many tools: namely admission webhooks, Open Policy Agent (OPA), Gatekeeper and finally an Azure Policy pod.


1. How do you assign an Azure policy to all your organization's subscriptions?
A: Assign that policy to the root management group.
The root management group contains all subscriptions. By assigning a policy to the root management group, this policy applies to all subscriptions.


2. You need to ensure that all pods created in your Kubernetes cluster have requests and limits configured, and deny pods without those from being created. How can you do this in Azure?
 A: Assign an Azure policy to the resource group of the Kubernetes cluster.
There's a built-in Azure policy to deny pods without requests/limits from being created.

3. You assign the policy 'Kubernetes cluster containers should only use allowed images' to the resource group of your Kubernetes cluster. What happens to existing pods not using allowed images?
A: The pods will be marked as incompliant in Azure policy.
Azure policy will report incompliant pods and deny new incompliant pods from being created. 



Exercise - Enable Azure Policy for AKS

Before installing the Azure Policy add-on or enabling any of the service features, your subscription must enable the Microsoft.PolicyInsights resource provider.
  1. You need the Azure CLI version 2.12.0 or later installed and configured. Run az --version to find the version. If you need to install or upgrade, see Install the Azure CLI.
  2. Register the resource providers and preview features.


1. Go to the Azure portal.
Azure portal
2. Click on the Cloud Shell icon at the top of the screen to the right of the search bar
3. Select the appropriate Subscription and click Create storage
4. In the top-left corner of the resulting Cloud Shell, click PowerShell and change it to Bash. If it is showing Bash already, you can skip this step
5. Register the resource providers and preview features by entering the command below to Cloud Shell.
# Log in first with az login if you're not using Cloud Shell
# Provider register: Register the Azure Policy provider
az provider register --namespace Microsoft.PolicyInsights


Create a resource group
az group create --location eastus --name videogamerg

Create AKS cluster using the default settings
az aks create --name videogamecluster --resource-group videogamerg


Enable Azure Policies for the cluster
az aks enable-addons --addons azure-policy --name videogamecluster --resource-group videogamerg


Discovering built-in Azure policies for Kubernetes
There are two ways to discover built-in Azure policies for Kubernetes:
  • By using the Azure documentation, which details the built-in policies.
  • By using the Azure policy blade in the Azure portal, going to definitions, and filtering on category Kubernetes.


A policy initiative is a collection of policy definitions. Two of the initiatives for Kubernetes are:
  • Kubernetes cluster pod security baseline standards for Linux-based workloads
  • Kubernetes cluster pod security restricted standards for Linux-based workloads

Deploy a non-compliant pod into the cluster
az aks get-credentials -n videogamecluster -g videogamerg

Run the following code to create a simple nginx pod from Docker Hub.
cat <<EOF | kubectl apply -f -
 apiVersion: apps/v1
 kind: Deployment
 metadata:
   name: simple-nginx
   labels:
     app: nginx
 spec:
   selector:
     matchLabels:
       app: nginx
   template:
     metadata:
       labels:
         app: nginx
     spec:
       containers:
       - name: simple-nginx
         image: docker.io/library/nginx:stable
         resources:
           requests:
             cpu: 100m
             memory: 100Mi
           limits:
             cpu: 120m
             memory: 120Mi
         ports:
         - containerPort: 80
EOF



Run the code below to deploy the service to expose the deployment
cat <<EOF | kubectl create -f -
 apiVersion: v1
 kind: Service
 metadata:
   name: simple-nginx
   labels:
     app: nginx
 spec:
   type: LoadBalancer
   ports:
   - port: 80
   selector:
     app: nginx
EOF


List all of the deployed services
kubectl get services

Copy the External-IP of the simple-nginx service and paste it in your browser to see if the service runs as expected.


Apply Azure Policy to the AKS cluster

Assign a policy
1. Go to the Policy page in Azure portal.
2. In the left pane of the Azure Policy page, select Definitions.
3. From the Category dropdown list box, use Select all to clear the filter and then select Kubernetes.

4. Select the Kubernetes cluster containers should only use allowed images policy definition.
5. Click the Assign button.
6. Set the Scope to the resource group of the Kubernetes cluster you created, which in this case is the videogamerg resource group.
7. Enter the following into the Allowed container image regex field and click the Review + create button
.+\.azurecr\.io/.+$



Assign a policy initiative
1. Return to the Policy page in Azure portal.
2. In the left pane of the Azure Policy page, select Definitions.
3. From the Category dropdown list box, use Select all to clear the filter and then select Kubernetes.
4. Select the Kubernetes cluster pod security restricted standards for Linux-based workloads initiative definition. Take some time to review the various policies that are a part of the initiative.
5. Select the Assign button at the top-left corner of the screen.
6. Set the Scope to the resource group of the Kubernetes cluster you created, which in this case is the videogamerg. Fill out the rest of the form as you did in the previous step and click Review + create.
7. Click the Create button.



Test the Azure Policy
kubectl get ConstraintTemplates


Create another nginx deployment and service using the code below

cat <<EOF | kubectl create -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: second-simple-nginx
  labels:
    app: second-nginx
spec:
  selector:
    matchLabels:
      app: second-nginx
  template:
    metadata:
      labels:
        app: second-nginx
    spec:
      containers:
      - name: second-simple-nginx
        image: docker.io/library/nginx:stable
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 120m
            memory: 120Mi
        ports:
        - containerPort: 80
EOF


Create the service

cat <<EOF | kubectl create -f -
 apiVersion: v1
 kind: Service
 metadata:
   name: second-simple-nginx
   labels:
     app: second-nginx
 spec:
   type: LoadBalancer
   ports:
   - port: 80
   selector:
     app: second-nginx
EOF


check to see if the pod was created
kubectl get pods


NAME                            READY   STATUS    RESTARTS   AGE
simple-nginx-66d884c498-msbpc   1/1     Running   0          63m


Diagnose why the pod was not deployed

describe the deployment.
kubectl get replicasets


Check compliance status using Azure Policy
1. Go to the Policy page in Azure portal.
2. At the top, you can set the scope to your cluster resource group by clicking on the .... Select the Subscription and the resource group where the AKS cluster is sitting and click Select at the bottom.


3. Click on the Kubernetes cluster containers should only use allowed images Policy. You will see the cluster that has the non-compliant pod in it
4. Click on the cluster to get more details on which pod is not compliant. Here you will see the name of the specific pod that is not compliant. 


Remove the non-compliant pod and recheck compliance

kubectl delete deployment simple-nginx


1. If a Policy is applied with the deny option to a Resource group, what happens to already existing noncompliant resources in that group?
 A: No changes are made to the resources themselves but they are listed as noncompliant resources.
Correct. Azure Policy doesn't delete resources but you can always check for noncompliant already existing resources.


2. What happens when you have a Policy set as deny at the Subscription level and the same Policy set as audit at the Resource group level?
 A: The Policy set as deny would take effect.
Correct. The more restrictive Policy would take effect.


3. You have an Azure Policy applied at the Subscription level, but one of your AKS clusters needs to be exempt from a specific policy, what's the best way to handle that?
A: Add an exclusion to the AKS cluster Resource group that the Policy shouldn't apply to.
Correct. Azure Policies allows you to add exclusions you can use to exempt certain resources from having to comply with the Policy.



Clean up resources

1. Go to the Azure portal.
Azure portal
2. In the left menu, select Resource groups.
3. Select the resource group name that starts with videogamerg or the resource group name you used.
4. On the Overview tab, select Delete resource group.
5. To confirm the deletion, enter the name of the resource group. To delete all the resources you created in this module, select Delete.


Clean up Policies
1. Go to the Policy page in Azure portal.
2. Click on Assignments in the left blade
3. Select the same scope you did before (your AKS cluster resource group)
4. Select the Policy you assigned and click Delete assignment in the resulting page
5. Click Yes when the verification comes up
6. Repeat the same steps for the initiative you assigned





