Create and publish custom GitHub actions
https://learn.microsoft.com/en-us/training/modules/create-custom-github-actions/

‚Ä¢ Identify the metadata and syntax needed to create custom GitHub actions.
‚Ä¢ Learn best practices to publish a private or public GitHub action.
‚Ä¢ Consume actions within a workflow file.
‚Ä¢ Create custom JavaScript based actions.
‚Ä¢ Publish a newly created action to the GitHub Marketplace.


Create a custom GitHub action

Types of GitHub actions
three different types of actions: Docker container actions, JavaScript actions, and composite run steps actions. 

Docker container actions
The steps to take to build a Docker container action are then minimal and straightforward:
  1. Create a Dockerfile to define the commands to assemble the Docker image.
  2. Create an action.yml metadata file to define the inputs and outputs of the action. Set the runs: using: value to docker and the runs: image: value to Dockerfile in the file.
  3. Create an entrypoint.sh file to describe the docker image.
  4. Commit and push your action to GitHub with the following files: action.yml, entrypoint.sh, Dockerfile, and README.md.



JavaScript actions

The steps to build a JavaScript action are minimal and straightforward:
  1. Create an action.yml metadata file to define the inputs and outputs of the action, as well as tell the action runner how to start running this JavaScript action.
  2. Create an index.js file with context information about the Toolkit packages, routing, and other functions of the action.
  3. Commit and push your action to GitHub with the following files: action.yml, index.js, node_modules, package.json, package-lock.json, and README.md.


Composite run steps actions
Composite run steps actions allow you to reuse actions by using shell scripts. You can even mix multiple shell languages within the same action.


Inputs are the parameters that allow you to specify data that the action expects to use during its runtime. GitHub stores these input parameters as environment variables.

inputs:
  firstNameStudent:
    description: 'First name of student'
    required: false
    default: '1'
  studentGrade:
    description: 'Grade of the student'
    required: true


Outputs are the parameters that allow you to declare data.
outputs:
  average:
    description: 'The average grade of the students'


Docker container actions require the runs statement to configure the image the Docker action uses with the following arguments:
  ‚Ä¢ using: Needs to be set to docker to run a Docker container action
  ‚Ä¢ image: Docker image used as the container to run the action

runs:
  using: 'docker'
  image: 'Dockerfile'


runs for JavaScript actions
JavaScript actions require that the runs statement take the following two arguments:
  ‚Ä¢ using: Application used to execute the code as defined in main
  ‚Ä¢ main: File that contains the action code; the application defined in using executes this file

runs:
  using: 'node12'
  main: 'main.js'


runs for composite run steps actions

the runs statement take the following three arguments:
  ‚Ä¢ using: Needs to be set to "composite" to run a composite run step
  ‚Ä¢ steps: Run steps to run the action
  ‚Ä¢ steps[*].run: Command you want to run (can be inline or a script in your action repository)

runs:
  using: "composite"
  steps:
    - run: ${{ github.action_path }}/test/script.sh
      shell: bash


need to specify the icon and color you wish to use.
branding:
  icon: 'shield'  
  color: 'blue'


Most workflow commands use the echo command in the following specific format, while others can be invoked by writing to a file:

echo "::workflow-command parameter1={data},parameter2={data}::{command value}"

- name: workflow commands logging messages
  run: |
    echo "::debug::This is a debug message"
    echo "This is an info message"
    echo "::error::This is an error message"
    echo "::warning::This is a warning message"


It's important to note that these workflow commands need to be on a single line. Characters that interfere with parsing, such as commas and line breaks, will need to be URL-encoded.

This text spans
across multiple lines


When creating an action, it's important to first decide where you want that action to live and the visibility of that action, whether it will be public or private. 

we recommend storing the action in the .github directory. For example, .github/actions/action-a and .github/actions/action-b.


Tags
steps:
    - uses: actions/javascript-action@v1
    - uses: actions/javascript-action@v1.0.1
    - uses: actions/javascript-action@v1-beta


Use a commit's SHA
steps:
    - uses: actions/javascript-action@2522385f6f7ba04fe7327647b213799853a8f55c



Exercise - Create a custom JavaScript GitHub action

https://github.com/skills/write-javascript-actions

Step 1: Initialize a new JavaScript project
Welcome to the course üéâ
Configuring a workflow
Actions are enabled on your repository by default, but we still have to tell our repository to use them. We do this by creating a workflow file in our repository.
A workflow file can be thought of as the recipe for automating a task. They house the start to finish instructions, in the form of jobs and steps, for what should happen based on specific triggers.
Your repository can contain multiple workflow files that carry out a wide variety of tasks. It is important to consider this when deciding on a name for your workflow. The name you choose should reflect the tasks being performed.
In our case, we will use this one workflow file for many things, which leads us to break this convention for teaching purposes.
Read more about workflows
On to your development environment
Our JavaScript actions are going to leverage the GitHub ToolKit for developing GitHub Actions.
This is an external library that we will install using npm which means that you will need Node.js installed.
We find writing actions to be easier from a local environment vs trying to do everything right here in the repository. Doing these steps locally allows you to use the editor of your choice so that you have all the extensions and snippets you are used to when writing code.
If you do not have a preferred environment then we suggest following along exactly as you see on the screen, which means you'll need to install Visual Studio Code.
Don't forget to set up your workstation
Most of your work going forward will take place away from your Skills repository, so before continuing with the course ensure you have the following installed on your local machine.
  1. Node.js
  2. Visual Studio Code or your editor of choice
  3. Git
‚å®Ô∏è Activity 1: Initialize a new JavaScript project
Once you have the necessary tools installed locally, follow these steps to begin creating your first action.
  1. Open the Terminal (Mac and Linux) or Command Prompt (Windows) on your local machine
  2. Clone your Skills repo to your local machine: 
git clone <this repository URL>.git
Navigate to the folder you just cloned: 
cd <local folder with cloned repo>
We are using branch called main. 
git switch main
Create a new folder for our actions files: 
mkdir -p .github/actions/joke-action
Navigate to the joke-action folder you just created: 
cd .github/actions/joke-action
Initialize a new project: 
npm init -y
Install the request, request-promise and @actions/core dependencies using npm from the [GitHub ToolKit] (https://github.com/actions/toolkit): 
npm install --save request request-promise @actions/core
Commit those newly added files,we will remove the need to upload node_modules in a later step: 
git add .
git commit -m 'add project dependencies'
Push your changes to your repository: 
git push
Wait about 20 seconds then refresh this page (the one you're following instructions from). GitHub Actions will automatically update to the next step.


cd /Users/sjia/dev/workspaces/training/GitHubActions/DemoExercises
 git clone https://github.com/jiasimon/skills-write-javascript-actions.git

git switch main
Already on 'main'
Your branch is up to date with 'origin/main'.

cd .github/actions/joke-action
NisumUsersMBP4:joke-action sjia$ pwd
/Users/sjia/dev/workspaces/training/GitHubActions/DemoExercises/skills-write-javascript-actions/.github/actions/joke-action


npm init -y
Wrote to /Users/sjia/dev/workspaces/training/GitHubActions/DemoExercises/skills-write-javascript-actions/.github/actions/joke-action/package.json:

{
¬† "name": "joke-action",
¬† "version": "1.0.0",
¬† "description": "",
¬† "main": "index.js",
¬† "scripts": {
¬† ¬† "test": "echo \"Error: no test specified\" && exit 1"
¬† },
¬† "keywords": [],
¬† "author": "",
¬† "license": "ISC"
}


npm install --save request request-promise @actions/core

npm WARN EBADENGINE Unsupported engine {
npm WARN EBADENGINE ¬† package: 'undici@5.28.4',
npm WARN EBADENGINE ¬† required: { node: '>=14.0' },
npm WARN EBADENGINE ¬† current: { node: 'v12.16.3', npm: '7.20.6' }
npm WARN EBADENGINE }
npm WARN EBADENGINE Unsupported engine {
npm WARN EBADENGINE ¬† package: '@fastify/busboy@2.1.1',
npm WARN EBADENGINE ¬† required: { node: '>=14' },
npm WARN EBADENGINE ¬† current: { node: 'v12.16.3', npm: '7.20.6' }
npm WARN EBADENGINE }
npm WARN deprecated har-validator@5.1.5: this library is no longer supported
npm WARN deprecated request-promise@4.2.6: request-promise has been deprecated because it extends the now deprecated request package, see https://github.com/request/request/issues/3142
npm WARN deprecated uuid@3.4.0: Please upgrade¬† to version 7 or higher.¬† Older versions may use Math.random() in certain circumstances, which is known to be problematic.¬† See https://v8.dev/blog/math-random for details.
npm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142

added 58 packages, and audited 59 packages in 2s

2 packages are looking for funding
¬† run `npm fund` for details

4 moderate severity vulnerabilities

To address issues that do not require attention, run:
¬† npm audit fix

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.
npm notice¬†
npm notice New major version of npm available! 7.20.6 -> 10.5.2
npm notice Changelog: https://github.com/npm/cli/releases/tag/v10.5.2
npm notice Run npm install -g npm@10.5.2 to update!
npm notice¬†


git commit -m 'add project dependencies,custom JavaScript GitHub action'

git push



Step 2: Configure Your Action
Let's keep going! üö≤
Excellent!
Now that we have the custom action pre-requisites, let us create joke-action action.
‚å®Ô∏è Activity 1: Configure Your Action
All of the following steps take place inside of the .github/actions/joke-action directory.
We will start with using the parameters that are required and later implement some optional parameters as our action evolves.
  1. Create a new file in: .github/actions/joke-action/action.yml
  2. Add the following contents to the .github/actions/joke-action/action.yml file:
name: "my joke action"

description: "use an external API to retrieve and display a joke"

runs:
  using: "node16"
  main: "main.js"
‚Ä¢ Save the action.yml file
‚Ä¢ Commit the changes and push them to the main branch:
git add action.yml
git commit -m 'create action.yml'
git pull
git push
‚Ä¢ Wait about 20 seconds then refresh this page (the one you're following instructions from). GitHub Actions will automatically update to the next step.


Create a new file in: .github/actions/joke-action/action.yml

name: "my joke action"

description: "use an external API to retrieve and display a joke"

runs:
  using: "node16"
  main: "main.js"

git commit -m 'custom JavaScript GitHub action: create action.yml'

git pull

From https://github.com/jiasimon/skills-write-javascript-actions
¬†¬† 86f0d45..848b681¬† main ¬† ¬† ¬† -> origin/main
Merge made by the 'recursive' strategy.
¬†.github/steps/-step.txt |¬† 2 +-
¬†README.md ¬† ¬† ¬† ¬† ¬† ¬† ¬† | 95 ++++++++++++++++++++++++++---------------------------------------------------------------------
¬†2 files changed, 27 insertions(+), 70 deletions(-)



Step 3: Create the metadata file
Nice work configuring your action üòÑ
Action metadata
Every GitHub Action that we write needs to be accompanied by a metadata file. This file has a few rules to it, as are indicated below:
  ‚Ä¢ Filename must be action.yml.
  ‚Ä¢ Required for both Docker container and JavaScript actions.
  ‚Ä¢ Written in YAML syntax.
This file defines the following information about your action:
Parameter Description Required
Name  The name of your action. Helps visually identify the actions in a job.  ‚úÖ
Description A summary of what your action does. ‚úÖ
Inputs  Input parameters allow you to specify data that the action expects to use during runtime. These parameters become environment variables in the runner.  ‚ùå
Outputs Specifies the data that subsequent actions can use later in the workflow after the action that defines these outputs has run. ‚ùå
Runs  The command to run when the action executes.  ‚úÖ
Branding  You can use a color and Feather icon to create a badge to personalize and distinguish your action in GitHub Marketplace.  ‚ùå

Read more about Action metadata
‚å®Ô∏è Activity 1: Create the metadata file
All of the following steps take place inside of the .github/actions/joke-action directory.
Our action does not require much metadata for it to run correctly. We will not be accepting any inputs, we will however be setting a single output this time.
  1. Update the action metadata file .github/actions/joke-action/action.yml with the following content:
name: "my joke action"

description: "use an external API to retrieve and display a joke"

outputs:
  joke-output:
    description: The resulting joke from the icanhazdadjokes API

runs:
  using: "node16"
  main: "main.js"
‚Ä¢ Save the action.yml file
‚Ä¢ Commit the changes and push them to GitHub:
git add action.yml
git commit -m 'add metadata for the joke action'
git pull
git push
‚Ä¢ Wait about 20 seconds then refresh this page (the one you're following instructions from). GitHub Actions will automatically update to the next step.


name: "my joke action"
description: "use an external API to retrieve and display a joke"

outputs:
  joke-output:
    description: The resulting joke from the icanhazdadjokes API

runs:
  using: "node16"
  main: "main.js"

git commit -m 'custom JavaScript GitHub action: add metadata for the joke action'

git push
To https://github.com/jiasimon/skills-write-javascript-actions.git
¬†! [rejected]¬† ¬† ¬† ¬† main -> main (fetch first)
error: failed to push some refs to 'https://github.com/jiasimon/skills-write-javascript-actions.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.


Step 4: Create the JavaScript files for your action
Good job adding the metadata file! üíÉ
Files
As you probably know, in JavaScript and other programming languages it is common to break your code into modules so that it is easier to read and maintain going forward. Since JavaScript actions are just programs written in JavaScript that run based on a specific trigger we are able to make our action code modular as well.
To do so we will create two files. One of them will contain the logic to reach out to an external API and retrieve a joke for us, the other will call that module and print the joke to the actions console for us. We will be extending this functionality in our third and final action.
Fetching a joke
Joke API
The first file will be joke.js and it will fetch our joke for us. We will be using the icanhazdadjoke API for our action. This API does not require any authentication, but it does however that we set a few parameters in the HTTP headers. We need to point out what those are when we get to the code, however it is outside of the scope of this course to cover HTTP in any depth.
When we make our request to this API we will get back a JSON Object in the response. That Object looks like this:
{
  id: '0LuXvkq4Muc',
  joke: "I knew I shouldn't steal a mixer from work, but it was a whisk I was willing to take.",
  status: 200
}
It contains 3 key/value pairs of data that we can use in our own program or service. In our case, we are only interested in the joke field.
Joke Module
We will create a file named joke.js and it will reside in the .github/actions/joke-action directory.
The joke module will look like this:
const request = require("request-promise");
const options = {
  method: "GET",
  uri: "https://icanhazdadjoke.com/",
  headers: {
    Accept: "application/json",
    "User-Agent": "Writing JavaScript action GitHub Skills course.",
  },
  json: true,
};
async function getJoke() {
  const res = await request(options);
  return res.joke;
}
module.exports = getJoke;


git pull

Updating 69a0b02..521014f
Fast-forward
¬†.github/steps/-step.txt | ¬† 2 +-
¬†README.md ¬† ¬† ¬† ¬† ¬† ¬† ¬† | 173 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++------------------------------------
¬†2 files changed, 137 insertions(+), 38 deletions(-)


git add joke.js main.js
NisumUsersMBP4:joke-action sjia$ git commit -m 'creating joke.js and main.js'



Step 5: Add your action to the workflow file
Great job! üéâ
All of the following steps will add the action to the workflow file that‚Äôs already in the repo my-workflow.yml file
‚å®Ô∏è Activity 1: Edit the custom action at the bottom of the workflow file.
- name: ha-ha
  uses: ./.github/actions/joke-action
Here is what the full file should look like (we‚Äôre using issues instead of the pull request event and removing the reference to the hello world action.)
name: JS Actions
on:
  issues:
    types: [labeled]
jobs:
  action:
    if: ${{ !github.event.repository.is_template }}
    runs-on: ubuntu-latest
steps:
      - uses: actions/checkout@v3
      - name: ha-ha
        uses: ./.github/actions/joke-action
You can make these changes in your repository by opening my-workflow.yml in another browser tab and editing the file directly. Make sure to select the Commit directly to the main branch option.


Add below under steps

      - name: ha-ha
        uses: ./.github/actions/joke-action


Step 6: Trigger the joke action
Great job! ‚ù§Ô∏è
Everything is all set up and now we are ready to start laughing. You will find you have some joke related labels available to you in this repository. You don't have to use them, any label will trigger our workflow, but the easiest way to follow along would be to use suggested labels.
Trigger a joke
  1. Open issue #1 in the "Issues tab"
  2. Apply the first-joke label to the issue
  3. Wait a few seconds and then apply the second-joke label to the issue
  4. Check the JS Actions workflow results on the "Actions tab"
  5. Wait about 20 seconds then refresh this page (the one you're following instructions from). GitHub Actions will automatically update to the next step.


Finish

Congratulations, you've completed this course!
In this course, you've learned a lot about developing custom actions using JavaScript and Actions Toolkit.
Publishing your actions
Publishing your actions is a great way to help others in your team and across the GitHub community. Although actions do not need to be published to be consumed, by adding them to the marketplace you make them easier to find.
Some notable actions you will find on the marketplace are:
  ‚Ä¢ Actions for Discord
  ‚Ä¢ GitHub Action for Slack
  ‚Ä¢ Jekyll action
  ‚Ä¢ Run Jest




1. You need to create a custom GitHub Action written in Ruby. Which action type would you choose?
A: Docker container action
Actions written in a language other than JavaScript must be placed inside of a Docker container.


2. Which keywords are required for a valid action.yml file?
A: name, runs, description


3. Which workflow command would set the debug message to This is an error message?
A: echo "::error::This is an error message"



