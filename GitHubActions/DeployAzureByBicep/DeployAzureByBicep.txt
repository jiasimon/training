Deploy Azure resources by using Bicep and GitHub Actions
https://learn.microsoft.com/en-us/training/paths/bicep-github-actions/

Take this learning path to learn how to:
	• Build a workflow that deploys your Bicep files.
	• Create a service principal that can securely connect your workflow to Azure.
	• Ensure your Bicep code quality by validating and testing it within your workflow.
	• Work with multiple environments, and handle parameters and approvals.
	• Deploy other Azure configuration settings, applications, and databases.
	• Use pull requests to automatically validate and deploy your Bicep code as part of your review process.
	• Build workflows that publish reusable Bicep files to template specs and modules.
	• Secure your workflows, and ensure all of your Azure deployments follow your organization's standards.


Part 1: Fundamentals of Bicep

Part 2: Intermediate Bicep

Part 3: Advanced Bicep




Example scenario
Suppose you're responsible for deploying and configuring the Azure infrastructure to support a website at a toy company

You've built a Bicep template to deploy the website

A workflow is a configurable repeatable process that's defined in a file that's used to test and deploy your code. A workflow consists of all the steps, in the proper order, that you need to execute.


Until now, you've deployed your Bicep files from your local computer. After you write a Bicep template, you deploy it to Azure by using the Azure CLI or Azure PowerShell.

Triggers
You use a trigger to instruct GitHub Actions when to run your workflow.


Steps
A step represents a single operation that the workflow performs.

GitHub Actions offers two types of steps:
Run steps: use a run step to run a single command or a sequence of commands in Bash, PowerShell,

Action steps: An action step is a convenient way to access many different capabilities without writing script statements.

Jobs
In GitHub Actions, a job represents an ordered set of steps. 


a simple workflow definition in YAML:

name: learn-github-actions

on: [workflow_dispatch]

jobs:
  say-hello:
    runs-on: ubuntu-latest
    steps:
      - name: 'Run a one-line command'
        run: echo "hello from GitHub Actions"
      - name: 'Run a multi-line command'
        run: |
          echo "We'll add more steps soon."
          echo "For example, we'll add our Bicep deployment step."




Deploy Bicep files by using a workflow
To check out your code, you can use the actions/checkout@v3 action:

name: MyWorkflow

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        path: repo

Notice that the workflow includes the uses keyword. The keyword indicates you want to use a predefined action named actions/checkout.


Authenticate to Azure
Note: It might seem easier to store your user credentials in your YAML file, then sign in by using the az login command. You should never use this approach to authenticate your workflow.

There's an action named azure/login that handles the sign-in process. You also need to grant permission for your workflow to work with authentication tokens.

name: MyWorkflow

on: [workflow_dispatch]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        path: repo
    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}


The azure/login action requires that you provide three pieces of information to use a workload identity: a Microsoft Entra application ID, your Microsoft Entra tenant (directory) ID, and the Azure subscription ID that you want to work with.

Here's an example of how you can configure a step to use the azure/arm-deploy action:
name: MyWorkflow

on: [workflow_dispatch]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        path: repo
    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - uses: azure/arm-deploy@v1
      with:
        resourceGroupName: ${{ env.AZURE_RESOURCEGROUP_NAME }}
        template: ./deploy/main.bicep
        parameters: environmentType=Test


Create a variable

env:
    AZURE_RESOURCEGROUP_NAME: gh-actions
    AZURE_WEBAPP_NAME: webapp-gh-actions


After you've created a variable, you use a special syntax to refer to it within your workflow's YAML file, like this:

${{ env.AZURE_RESOURCEGROUP_NAME }}





Exercise - Add a Bicep deployment action to the workflow
Add your website's Bicep file to the GitHub repository

• Open the Visual Studio Code Explorer.
• At the root of your repository, create a deploy folder.
• In the deploy folder, create a new file named main.bicep. Make sure you create the file inside the deploy folder:

Copy the following code into the main.bicep file:

@description('The Azure region into which the resources should be deployed.')
param location string = resourceGroup().location

@description('The type of environment. This must be nonprod or prod.')
@allowed([
  'nonprod'
  'prod'
])
param environmentType string

@description('A unique suffix to add to resource names that need to be globally unique.')
@maxLength(13)
param resourceNameSuffix string = uniqueString(resourceGroup().id)

var appServiceAppName = 'toy-website-${resourceNameSuffix}'
var appServicePlanName = 'toy-website-plan'
var toyManualsStorageAccountName = 'toyweb${resourceNameSuffix}'

// Define the SKUs for each component based on the environment type.
var environmentConfigurationMap = {
  nonprod: {
    appServicePlan: {
      sku: {
        name: 'F1'
        capacity: 1
      }
    }
    toyManualsStorageAccount: {
      sku: {
        name: 'Standard_LRS'
      }
    }
  }
  prod: {
    appServicePlan: {
      sku: {
        name: 'S1'
        capacity: 2
      }
    }
    toyManualsStorageAccount: {
      sku: {
        name: 'Standard_ZRS'
      }
    }
  }
}

var toyManualsStorageAccountConnectionString = 'DefaultEndpointsProtocol=https;AccountName=${toyManualsStorageAccount.name};EndpointSuffix=${environment().suffixes.storage};AccountKey=${toyManualsStorageAccount.listKeys().keys[0].value}'

resource appServicePlan 'Microsoft.Web/serverfarms@2022-03-01' = {
  name: appServicePlanName
  location: location
  sku: environmentConfigurationMap[environmentType].appServicePlan.sku
}

resource appServiceApp 'Microsoft.Web/sites@2022-03-01' = {
  name: appServiceAppName
  location: location
  properties: {
    serverFarmId: appServicePlan.id
    httpsOnly: true
    siteConfig: {
      appSettings: [
        {
          name: 'ToyManualsStorageAccountConnectionString'
          value: toyManualsStorageAccountConnectionString
        }
      ]
    }
  }
}

resource toyManualsStorageAccount 'Microsoft.Storage/storageAccounts@2022-09-01' = {
  name: toyManualsStorageAccountName
  location: location
  kind: 'StorageV2'
  sku: environmentConfigurationMap[environmentType].toyManualsStorageAccount.sku
}


• Save your changes to the file.
• In the Visual Studio Code terminal, run this code to stage the changes, commit the changes, and push the changes to your repository:

git add deploy/main.bicep
git commit -m 'Add Bicep file'
git push



update your workflow definition to deploy your Bicep file to Azure.

• In Visual Studio Code, open the .github/workflows/workflow.yml file.
• At the top of the file, between on: and jobs:, add a permissions: section.
YAML 
name: deploy-toy-website
on: [workflow_dispatch]
permissions:
  id-token: write
  contents: read
jobs:




Rename the say-hello job to deploy:
YAML 
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:


• To remove the placeholder step from the workflow definition, delete the bottom two lines of the file.
• As a first step you'll add a task to check out the code to the runner's file system. Add a new step at the bottom of the file:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3


Below the step that you just added, add a task to sign in to your Azure environment. This task uses the secrets you defined earlier to sign in by using a workload identity:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}



Below the step that you just added, add another step to perform the Bicep deployment:
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - uses: azure/arm-deploy@v1
      with:
        deploymentName: ${{ github.run_number }}
        resourceGroupName: ${{ env.AZURE_RESOURCEGROUP_NAME }}
        template: ./deploy/main.bicep
        parameters: environmentType=${{ env.ENVIRONMENT }}


Add these variables and their values at the top of your workflow file, between permissions: and jobs:
YAML 
• name: deploy-toy-website

on: [workflow_dispatch]

permissions:
  id-token: write
  contents: read

env:
    AZURE_RESOURCEGROUP_NAME: ToyWebsite
    ENVIRONMENT: nonprod

jobs:
• Save your changes to the file. Your file should look like this example:
YAML 
• name: deploy-toy-website

on: [workflow_dispatch]

permissions:
  id-token: write
  contents: read

env:
    AZURE_RESOURCEGROUP_NAME: ToyWebsite
    ENVIRONMENT: nonprod

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - uses: azure/arm-deploy@v1
      with:
        deploymentName: ${{ github.run_number }}
        resourceGroupName: ${{ env.AZURE_RESOURCEGROUP_NAME }}
        template: ./deploy/main.bicep
        parameters: environmentType=${{ env.ENVIRONMENT }}
• In the Visual Studio Code terminal, stage your changes, commit them to your repository, and push them to Azure Repos:
Bash 

git add .
git commit -m 'Add Azure CLI tasks to workflow'
git push



Now, you're ready to run your workflow!
	1. In your browser, open the workflow by selecting Actions > deploy-toy-website.
	2. Select Run workflow > Run workflow.
	3. A new run of your workflow will appear in the runs list. If it doesn't appear, refresh your browser page.
	4. Select the running workflow to view the details of the run.
Wait for the run to finish.
	5. Select the deploy job.
	6. Select Run azure/arm-deploy@v1. This displays the task details.
	7. Select Run azure/arm-deploy@v1 in the task details.
	8. Inspect the rest of your workflow output.
The workflow shows a successful deployment.



Verify the deployment
	1. Go to the Azure portal.
	2. In the left menu, select Resource groups.
	3. Select ToyWebsite.
	4. In Overview, view the deployment status. You can see that one deployment succeeded.
	5. Select the 1 Succeeded link to see the details of the deployment.
	


Use triggers to control when your workflow runs








