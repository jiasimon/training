https://www.linkedin.com/learning/python-for-data-engineering-from-beginner-to-advanced/welcome-to-the-course?u=2111049


M1: Python Basics
=====
Google Colab

Google CoLab worksheet

https://colab.research.google.com/

https://colab.google/
Click "New Notebook"

Free Jupyter Notebook environment

Create a new notebook

Untitle.ipynb

Hover over, Two options

"+ Code"  , "+ Text"

"save a copy in drive"

Variables and data types

Integer, float, string

7 is an integer
3.14 is a float

 True is a boolean
 bol_var = True


Operators and expressions

Arithmetic
Comparision
Logical

Num1=7
Num2= 10

 sum = num1 + num2
 print(sum)

 ==
!=
< , >

 var_equal = num1 == num2

 var = num1 > num2

 print ( True and False)

 print ( True or False)

 if num > 10:
   print("Greater")
 else:
   print("Smaller")


 for loop

 for i in range (5):
    print(i)
0
1
2
3
4

Range(5) is  0 to 4

 while loop

 number = 5
 while number>0:
      print(number)
      number = number -1

Functions

Reusable code

 def greet():
    print("Hello World.")

 greet()

We will receive an error.

#solution
First try to run def greet()

Then run 
  greet()

 def greet(name):
     print("Hello   " + name)

 greet("Kevin Jia")

 def add_numbers(num1. num2):
    return num1 + num2


Modules and packages:
 assemble a car,

Pre-made parts


String manipulation

 replace method

 greeting.replace('Hello', 'Hi')

 sentence = '    Hello World.   "
 print(sentence)

 print(sentence.strip() )


 index = greeting.find('Data')
 
 format 
 template = ' hello {}'

 print(template.format('Kevin')  )

 words = greeting.split()
  print(words)

Error handling 

 print (10/0)
 receive ZeroDivisionError

 try:
    print(10/0)
 except ZeroDivisionError:
    print("sorry you are dividing zero")


 try:
    print(10/0)
 except:
    print("sorry you are dividing zero")


 try:
    print(10/0)
 except:
    print("sorry you are dividing zero")
  else:
    print(" nothing wrong happened")
  finally:
    print("execute always")

https://realpython.com/reverse-string-python/
To slice a string, you can use the following syntax:
Python
a_string[start:stop:step]


def reverse_string(text):
# Your code goes here.
return text[::-1]

"".join(reversed("Hello, World!"))
'!dlroW ,olleH'

>>> def reversed_string(text):
...     result = ""
...     for char in text:
...         result = char + result
...     return result


How can you create a variable called stored_variable that holds a float value of 7.0 in Python?
A: stored_variable = 7.0

How will you install the pandas package in Python?
A: !pip install pandas

In the following piece of Python script, how should you add to the code to have the message Smaller printed if the variable num is less than 10?
A: else: 
    print("Smaller")

How can you connect to a new runtime environment in Google Colab?
A: Select Connect.

Which scenario best describes data engineering?
A: collecting, validating, storing, and processing data to help make decisions




M2: Python Collections
=====

 collections: containers to hold multiple items, can be any type

List

Tuple: immutable. Records or structures
Does not support data changes
Represent a row in a table

Set: support unique item

Dictionary, support json

Tuples
Ordered, immutable, 

 employee = (1, 'Kevin Jia', 'Indore', 98321 )

 print(employee[1])
Kevin Jia
0-indexed

 len(employee)

print(employee[-1])
98321

 new_emp = list(employee)
 new_emp[1] ='Dr. Kevin Jia' 


 for x in employee
    print(x)


Lists:
Ordered, allow duplicates

 tasks = ['development', 'testing', 'monitoring']
 print(tasks)

 tasks.append('prod deployment')

 tasks.insert(1, 'unit test')

 tasks.pop(1)


Sets
 tasks = {'development', 'testing', 'monitoring' }
 print(tasks)
{ 'testing', 'monitoring',  'development'}

Sets has no order

tasks = {'development', 'testing', 'monitoring', 'testing' }

 tasks.add('prod deployment') 

 new_task = { 'unit testing' , 'release testing'}
 tasks,update(new_task)

 tasks.remove('testing')


 dictionaries
No duplicates

 user = {'name' : 'Kevin', 'city':'SF', 'age':15   }
 print(user)

print(user['city'])

 keys = user.keys()

 values = user.values()

 user.update('mobile':'4151234567')

 new_user = user

 new_user = user.copy()


def find_smallest(numbers):
    # Your code goes here.
    res = 10000
    for x in numbers:
        if x < res:
            res = x
    return res


 return min(numbers)



M3: Python file handling
====
File input/output, I/O

CSV, JSON, XML

Handling bad data in files


 work with CSV file

Like a table

Separated by commas

Use sample csv file in colab

"california_housing_test.csv"

 import csv
  with open ('/content/sample_data/california_housing_test.csv', mode = 'r') as file:
     csv_reader = csv.reader(file)
     for row in csv_reader:
        print(row) 




Work with json file

 import json
 with open ('/content/sample_data/anscombe.json', mode = 'r') as file:
 data = json.load(file)
 print(data)



 json.dump(data_file)




M4: pandas dataframe API
====

Multi types of data file handling

Sort and filter data

Math calc

Read files as DataFrames


Like a table

 import pandas as pd
 df = pd.read_csv('order.csv')


Print all rows instead of limited row
 print(df.to_string())


import pandas as pd
df = pd.read_json('anscombe.json')


df = pd.read_excel('customer.xlsx')


Data cleaning and pre-processing


 new_df = df.dropna()


 replace null with default

 df.fillna(100, inplace=true)

 df.fillna(100, inplace=True)

 df["UnitsSold"].fillna(100, inplace=True)

 df_new = df.drop_duplicates()



Data manipulation and aggregation

 new_df.aggregate('sum', 'min')



 df.plot(x='Product', y='Sales', kind='bar')

 plt.show()


Write dataframes as files

 merged_data.to_csv('Output.csv')


 return df['price'].sum()














